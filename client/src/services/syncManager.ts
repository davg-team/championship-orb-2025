import { openBaoService, OpenBaoSecret } from "./openBaoService";
import { Secret } from "shared/types/secret";
import { saveSecret, listSecrets } from "shared/tauri/vault";

export type SyncStatus = "idle" | "syncing" | "success" | "error";
export type SyncMode = "online" | "offline";

export interface SyncState {
  status: SyncStatus;
  mode: SyncMode;
  lastSyncTime: number | null;
  error: string | null;
  progress: {
    current: number;
    total: number;
  };
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ —Å OpenBao
 */
class SyncManager {
  private syncInterval: number | null = null;
  private syncState: SyncState = {
    status: "idle",
    mode: "offline",
    lastSyncTime: null,
    error: null,
    progress: {
      current: 0,
      total: 0,
    },
  };
  private listeners: Array<(state: SyncState) => void> = [];

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  private readonly SYNC_INTERVAL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
  private readonly LAST_SYNC_KEY = "last_sync_time";

  constructor() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const lastSync = localStorage.getItem(this.LAST_SYNC_KEY);
    if (lastSync) {
      this.syncState.lastSyncTime = parseInt(lastSync, 10);
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  subscribe(listener: (state: SyncState) => void): () => void {
    this.listeners.push(listener);
    // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º listener —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    listener(this.syncState);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this.listeners = this.listeners.filter((l) => l !== listener);
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  private updateState(updates: Partial<SyncState>): void {
    this.syncState = { ...this.syncState, ...updates };
    this.listeners.forEach((listener) => listener(this.syncState));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  getState(): SyncState {
    return this.syncState;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OpenBao —Å–µ–∫—Ä–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private convertOpenBaoToLocal(obSecret: OpenBaoSecret): Secret {
    return {
      id: obSecret.id,
      name: obSecret.name,
      type: obSecret.secret_type as any,
      data: obSecret.data,
      createdAt: obSecret.metadata?.created_time || new Date().toISOString(),
      metadata: {
        created_at: obSecret.metadata?.created_time || new Date().toISOString(),
        updated_at: new Date().toISOString(),
        is_local: false, // –°–µ–∫—Ä–µ—Ç –∏–∑ OpenBao
        sync_status: "synced",
      },
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenBao
   */
  async checkConnection(): Promise<boolean> {
    try {
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenBao...");
      
      const isHealthy = await openBaoService.healthCheck();
      console.log(`üè• OpenBao health check: ${isHealthy ? "‚úÖ OK" : "‚ùå FAIL"}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞, —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –ø–æ–∑–∂–µ
      const isOnline = isHealthy;
      this.updateState({ mode: isOnline ? "online" : "offline" });
      
      console.log(`üåê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${isOnline ? "online" : "offline"}`);
      return isOnline;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenBao:", error);
      this.updateState({ mode: "offline" });
      return false;
    }
  }

  /**
   * –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥)
   */
  async fullSync(masterPassword: string): Promise<void> {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...");

    this.updateState({
      status: "syncing",
      error: null,
      progress: { current: 0, total: 0 },
    });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const isOnline = await this.checkConnection();
      if (!isOnline) {
        throw new Error("OpenBao –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }

      console.log("üì• –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ OpenBao...");
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ OpenBao
      const obSecrets = await openBaoService.getAllSecrets();
      
      console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${obSecrets.length} —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ OpenBao`);
      this.updateState({
        progress: { current: 0, total: obSecrets.length },
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–∫—Ä–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
      let syncedCount = 0;
      for (const obSecret of obSecrets) {
        try {
          const localSecret = this.convertOpenBaoToLocal(obSecret);
          await saveSecret(localSecret, masterPassword);
          syncedCount++;
          
          this.updateState({
            progress: { current: syncedCount, total: obSecrets.length },
          });
        } catch (error) {
          console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ ${obSecret.id}:`, error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const now = Date.now();
      localStorage.setItem(this.LAST_SYNC_KEY, now.toString());

      this.updateState({
        status: "success",
        lastSyncTime: now,
        progress: { current: syncedCount, total: obSecrets.length },
      });

      console.log(`‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount}/${obSecrets.length} —Å–µ–∫—Ä–µ—Ç–æ–≤`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
      this.updateState({
        status: "error",
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      });
      throw error;
    }
  }

  /**
   * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
   */
  async incrementalSync(masterPassword: string): Promise<void> {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...");

    this.updateState({
      status: "syncing",
      error: null,
    });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const isOnline = await this.checkConnection();
      if (!isOnline) {
        throw new Error("OpenBao –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }

      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
      const localSecrets = await listSecrets();
      const localSecretsMap = new Map(localSecrets.map((s) => [s.id, s]));

      // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ OpenBao
      const obSecrets = await openBaoService.getAllSecrets();

      let updatedCount = 0;
      let addedCount = 0;

      for (const obSecret of obSecrets) {
        const localSecret = localSecretsMap.get(obSecret.id);

        if (!localSecret) {
          // –ù–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
          const secret = this.convertOpenBaoToLocal(obSecret);
          await saveSecret(secret, masterPassword);
          addedCount++;
          console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç: ${obSecret.name}`);
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å
          const obTime = new Date(obSecret.metadata?.created_time || 0).getTime();
          const localTime = new Date(localSecret.created_at).getTime();

          if (obTime > localTime) {
            // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ - –æ–±–Ω–æ–≤–ª—è–µ–º
            const secret = this.convertOpenBaoToLocal(obSecret);
            await saveSecret(secret, masterPassword);
            updatedCount++;
            console.log(`üîÑ –û–±–Ω–æ–≤–ª—ë–Ω —Å–µ–∫—Ä–µ—Ç: ${obSecret.name}`);
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const now = Date.now();
      localStorage.setItem(this.LAST_SYNC_KEY, now.toString());

      this.updateState({
        status: "success",
        lastSyncTime: now,
      });

      console.log(`‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: +${addedCount} –Ω–æ–≤—ã—Ö, ~${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
      this.updateState({
        status: "error",
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      });
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
   * –í—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É –ø–æ–ª–Ω–æ–π –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—Ä–∏–∏
   */
  async autoSync(masterPassword: string): Promise<void> {
    const isFirstSync = this.syncState.lastSyncTime === null;
    
    if (isFirstSync) {
      console.log("üì• –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é");
      await this.fullSync(masterPassword);
    } else {
      console.log("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é");
      await this.incrementalSync(masterPassword);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  startPeriodicSync(masterPassword: string): void {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –±—ã–ª
    this.stopPeriodicSync();

    console.log(`‚è±Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∫–∞–∂–¥—ã–µ ${this.SYNC_INTERVAL / 60000} –º–∏–Ω—É—Ç)`);

    this.syncInterval = window.setInterval(async () => {
      try {
        await this.incrementalSync(masterPassword);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
      }
    }, this.SYNC_INTERVAL);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  stopPeriodicSync(): void {
    if (this.syncInterval !== null) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
      console.log("‚è∏Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
   */
  async forceSync(masterPassword: string): Promise<void> {
    console.log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...");
    await this.incrementalSync(masterPassword);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
   */
  needsSync(): boolean {
    if (this.syncState.lastSyncTime === null) {
      return true; // –ï—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
    }

    const timeSinceLastSync = Date.now() - this.syncState.lastSyncTime;
    return timeSinceLastSync > this.SYNC_INTERVAL;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
   */
  getTimeSinceLastSync(): string | null {
    if (this.syncState.lastSyncTime === null) {
      return null;
    }

    const diff = Date.now() - this.syncState.lastSyncTime;
    const minutes = Math.floor(diff / 60000);
    
    if (minutes < 1) return "—Ç–æ–ª—å–∫–æ —á—Ç–æ";
    if (minutes < 60) return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours} —á. –Ω–∞–∑–∞–¥`;
    
    const days = Math.floor(hours / 24);
    return `${days} –¥–Ω. –Ω–∞–∑–∞–¥`;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const syncManager = new SyncManager();
