import { getToken, isValidToken } from "shared/jwt";

const OPENBAO_BASE_URL = "https://orencode.davg-team.ru/v1";
const TOKEN_STORAGE_KEY = "token_ob";
const TOKEN_EXPIRY_KEY = "token_ob_expiry";

export interface OpenBaoTokenResponse {
  auth: {
    client_token: string;
    accessor: string;
    policies: string[];
    token_policies: string[];
    lease_duration: number;
    renewable: boolean;
  };
}

export interface OpenBaoSecret {
  id: string;
  name: string;
  secret_type: string;
  data: Record<string, any>;
  metadata?: {
    created_time: string;
    version: number;
    destroyed?: boolean;
  };
}

export interface OpenBaoListResponse {
  data: {
    keys: string[];
  };
}

export interface OpenBaoSecretResponse {
  data: {
    data: Record<string, any>;
    metadata: {
      created_time: string;
      version: number;
      destroyed?: boolean;
    };
  };
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenBao API
 */
class OpenBaoService {
  private openBaoToken: string | null = null;
  private tokenExpiry: number | null = null;

  constructor() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.loadTokenFromStorage();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage
   */
  private loadTokenFromStorage(): void {
    const token = localStorage.getItem(TOKEN_STORAGE_KEY);
    const expiry = localStorage.getItem(TOKEN_EXPIRY_KEY);
    
    if (token && expiry) {
      const expiryTime = parseInt(expiry, 10);
      if (Date.now() < expiryTime) {
        this.openBaoToken = token;
        this.tokenExpiry = expiryTime;
        console.log(`üìÇ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage, –∏—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(expiryTime).toLocaleString()}`);
      } else {
        // –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ—á–∏—â–∞–µ–º
        console.log("‚è∞ –¢–æ–∫–µ–Ω –≤ localStorage –∏—Å—Ç—ë–∫, –æ—á–∏—â–∞–µ–º");
        this.clearToken();
      }
    } else {
      console.log("üìÇ –¢–æ–∫–µ–Ω –≤ localStorage –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ localStorage
   */
  private saveTokenToStorage(token: string, leaseDuration: number): void {
    const expiry = Date.now() + leaseDuration * 1000;
    localStorage.setItem(TOKEN_STORAGE_KEY, token);
    localStorage.setItem(TOKEN_EXPIRY_KEY, expiry.toString());
    this.openBaoToken = token;
    this.tokenExpiry = expiry;
    console.log(`üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –∏—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(expiry).toLocaleString()}`);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω
   */
  private clearToken(): void {
    localStorage.removeItem(TOKEN_STORAGE_KEY);
    localStorage.removeItem(TOKEN_EXPIRY_KEY);
    this.openBaoToken = null;
    this.tokenExpiry = null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å OpenBao —Ç–æ–∫–µ–Ω–∞
   */
  isTokenValid(): boolean {
    if (!this.openBaoToken || !this.tokenExpiry) {
      console.log("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏");
      return false;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç—ë–∫ (—Å –∑–∞–ø–∞—Å–æ–º –≤ 5 –º–∏–Ω—É—Ç)
    const isValid = Date.now() < this.tokenExpiry - 5 * 60 * 1000;
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞: ${isValid ? '–≤–∞–ª–∏–¥–µ–Ω' : '–∏—Å—Ç—ë–∫'}`);
    return isValid;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å OpenBao —Ç–æ–∫–µ–Ω (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
   */
  async getOpenBaoToken(forceRefresh: boolean = false): Promise<string> {
    console.log(`üîê getOpenBaoToken –≤—ã–∑–≤–∞–Ω, forceRefresh: ${forceRefresh}`);
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!forceRefresh && this.isTokenValid() && this.openBaoToken) {
      console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω");
      return this.openBaoToken;
    }

    // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const jwtToken = getToken();
    console.log("üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è OpenBao...");
    console.log("üîë JWT —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", !!jwtToken);
    
    if (!jwtToken || !isValidToken(jwtToken)) {
      console.error("‚ùå JWT —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω");
      throw new Error("JWT —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω");
    }
    
    console.log("‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –æ–±–º–µ–Ω–∏–≤–∞–µ–º –Ω–∞ OpenBao —Ç–æ–∫–µ–Ω...");

    try {
      // –û–±–º–µ–Ω–∏–≤–∞–µ–º JWT –Ω–∞ OpenBao —Ç–æ–∫–µ–Ω
      const requestUrl = `${OPENBAO_BASE_URL}/auth/jwt/login`;
      console.log("üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ OpenBao:", requestUrl);
      
      const response = await fetch(requestUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          jwt: jwtToken,
          role: "default",
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OpenBao —Ç–æ–∫–µ–Ω–∞: ${response.status} - ${errorText}`);
      }

      const data: OpenBaoTokenResponse = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      this.saveTokenToStorage(data.auth.client_token, data.auth.lease_duration);
      
      console.log("‚úÖ OpenBao —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
      console.log(`üîë –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: ${data.auth.client_token.substring(0, 10)}...`);
      return data.auth.client_token;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OpenBao —Ç–æ–∫–µ–Ω–∞:", error);
      this.clearToken();
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ OpenBao API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
   */
  private async fetchWithAuth(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<Response> {
    let token = await this.getOpenBaoToken();

    const makeRequest = async (authToken: string) => {
      const requestUrl = `${OPENBAO_BASE_URL}${endpoint}`;
      console.log("üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", requestUrl);
      console.log(`üîë –¢–æ–∫–µ–Ω: ${authToken ? authToken.substring(0, 10) + '...' : 'null'}`);
      
      return fetch(requestUrl, {
        ...options,
        headers: {
          ...options.headers,
          "X-Vault-Token": authToken,
          "Content-Type": "application/json",
        },
      });
    };

    let response = await makeRequest(token);
    console.log(`üì° –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 403, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    if (response.status === 403) {
      console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...");
      token = await this.getOpenBaoToken(true);
      response = await makeRequest(token);
      console.log(`üì° –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);
    }

    return response;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
   */
  async listSecrets(path: string = ""): Promise<string[]> {
    try {
      const listPath = path ? `/kv/metadata/${path}` : "/kv/metadata";
      const response = await this.fetchWithAuth(`${listPath}?list=true`);

      if (response.status === 404) {
        // –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π
        return [];
      }

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤: ${response.status}`);
      }

      const data: OpenBaoListResponse = await response.json();
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫
      const allSecrets: string[] = [];
      
      for (const key of data.data.keys) {
        if (key.endsWith("/")) {
          // –≠—Ç–æ –ø–∞–ø–∫–∞, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –Ω–µ—ë
          const subPath = path ? `${path}/${key}` : key;
          const subSecrets = await this.listSecrets(subPath.replace(/\/$/, ""));
          allSecrets.push(...subSecrets);
        } else {
          // –≠—Ç–æ —Å–µ–∫—Ä–µ—Ç
          const fullPath = path ? `${path}/${key}` : key;
          allSecrets.push(fullPath);
        }
      }

      return allSecrets;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
   */
  async getSecret(path: string): Promise<OpenBaoSecret> {
    try {
      const response = await this.fetchWithAuth(`/kv/data/${path}`);

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ ${path}: ${response.status}`);
      }

      const result: OpenBaoSecretResponse = await response.json();
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ–∫—Ä–µ—Ç–∞
      const secret: OpenBaoSecret = {
        id: path.split("/").pop() || path,
        name: result.data.data.name || path.split("/").pop() || path,
        secret_type: result.data.data.type || "generic",
        data: result.data.data,
        metadata: result.data.metadata,
      };

      return secret;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ ${path}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  async getAllSecrets(): Promise<OpenBaoSecret[]> {
    try {
      console.log("üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–µ–∫—Ä–µ—Ç–æ–≤ —Å OpenBao...");
      
      const secretPaths = await this.listSecrets();
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${secretPaths.length} —Å–µ–∫—Ä–µ—Ç–æ–≤`);

      const secrets: OpenBaoSecret[] = [];
      
      for (const path of secretPaths) {
        try {
          const secret = await this.getSecret(path);
          secrets.push(secret);
        } catch (error) {
          console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç ${path}:`, error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
        }
      }

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${secrets.length} —Å–µ–∫—Ä–µ—Ç–æ–≤`);
      return secrets;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤:", error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenBao
   */
  async healthCheck(): Promise<boolean> {
    try {
      const healthUrl = `${OPENBAO_BASE_URL.replace("/v1", "")}/v1/sys/health`;
      console.log("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è OpenBao:", healthUrl);
      
      const response = await fetch(healthUrl, {
        method: "GET",
      });
      return response.ok;
    } catch (error) {
      console.error("‚ùå OpenBao –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI)
   */
  getCurrentToken(): string | null {
    return this.openBaoToken;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  getTokenExpiry(): number | null {
    return this.tokenExpiry;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const openBaoService = new OpenBaoService();
