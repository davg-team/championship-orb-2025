import { create } from "zustand";
import { subscribeWithSelector } from "zustand/middleware";
import {
  listSecrets,
  listItems,
  saveSecret,
  getSecret as getTauriSecret,
  updateSecret,
  deleteSecret as deleteTauriSecret,
  encryptItem,
  decryptItem,
  deleteItem,
} from "shared/tauri/vault";
import { Secret, SecretListItem, LegacySecret } from "shared/types/secret";
import { isLegacySecret, migrateLegacySecret } from "shared/utils/secretUtils";

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π store –¥–ª—è —Å–µ–∫—Ä–µ—Ç–æ–≤
 */
interface SecretsStore {
  secrets: SecretListItem[];
  loading: boolean;
  error: string | null;

  // Actions
  loadSecrets: () => Promise<void>;
  addSecretNew: (secret: Secret, masterPassword: string) => Promise<void>;
  getSecretById: (id: string, masterPassword: string) => Promise<Secret | null>;
  updateSecretById: (secret: Secret, masterPassword: string) => Promise<void>;
  deleteSecret: (id: string) => Promise<void>;
  refreshSecrets: () => Promise<void>;

  // Legacy methods
  addSecret: (
    id: string,
    name: string,
    login: string,
    password: string,
    host: string,
    masterPassword: string,
  ) => Promise<void>;
  getSecret: (
    id: string,
    masterPassword: string,
  ) => Promise<LegacySecret | null>;
}

const useSecretsStore = create<SecretsStore>()(
  subscribeWithSelector((set, get) => ({
    secrets: [],
    loading: false,
    error: null,

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
     */
    loadSecrets: async () => {
      set({ loading: true, error: null });
      try {
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –Ω–æ–≤–æ–≥–æ API
        try {
          const items = await listSecrets();
          console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${items.length} —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);
          set({ secrets: items });
        } catch (err) {
          // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
          console.warn("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π API, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è");
          const legacyItems = await listItems();
          console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${legacyItems.length} —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ API`);
          set({
            secrets: legacyItems.map((item) => ({
              id: item.id,
              name: "–°–µ–∫—Ä–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
              type: "database" as any,
              created_at: item.created_at,
            })),
          });
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤:", err);
        set({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤" });
      } finally {
        set({ loading: false });
      }
    },

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
     */
    addSecretNew: async (secret: Secret, masterPassword: string) => {
      set({ loading: true, error: null });
      try {
        await saveSecret(secret, masterPassword);
        await get().loadSecrets(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞:", err);
        set({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–∫—Ä–µ—Ç" });
        throw err;
      } finally {
        set({ loading: false });
      }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç –ø–æ ID
     */
    getSecretById: async (
      id: string,
      masterPassword: string,
    ): Promise<Secret | null> => {
      set({ error: null });
      try {
        // –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π API
        try {
          const secret = await getTauriSecret(id, masterPassword);
          // @ts-ignore
          return secret;
        } catch (err) {
          // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API –∏ –º–∏–≥—Ä–∞—Ü–∏—è
          console.warn("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞");
          const legacySecret = await decryptItem(id, masterPassword);
          if (isLegacySecret(legacySecret)) {
            return migrateLegacySecret(id, legacySecret);
          }
          throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ–∫—Ä–µ—Ç–∞");
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞:", err);
        set({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç" });
        return null;
      }
    },

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç
     */
    updateSecretById: async (secret: Secret, masterPassword: string) => {
      set({ loading: true, error: null });
      try {
        await updateSecret(secret, masterPassword);
        await get().loadSecrets(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞:", err);
        set({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç" });
        throw err;
      } finally {
        set({ loading: false });
      }
    },

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ä–µ—Ç
     */
    deleteSecret: async (id: string) => {
      set({ loading: true, error: null });
      try {
        // –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π API
        try {
          await deleteTauriSecret(id);
        } catch (err) {
          // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API
          await deleteItem(id);
        }
        await get().loadSecrets(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞:", err);
        set({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ä–µ—Ç" });
        throw err;
      } finally {
        set({ loading: false });
      }
    },

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤
     */
    refreshSecrets: async () => {
      console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤...");
      await get().loadSecrets();
      console.log("‚úÖ –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω");
    },

    // ============================================
    // –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    // ============================================

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ addSecretNew —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π Secret
     */
    addSecret: async (
      id: string,
      name: string,
      login: string,
      password: string,
      host: string,
      masterPassword: string,
    ) => {
      set({ loading: true, error: null });
      try {
        await encryptItem(id, name, login, password, host, masterPassword);
        await get().loadSecrets(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞:", err);
        set({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–∫—Ä–µ—Ç" });
        throw err;
      } finally {
        set({ loading: false });
      }
    },

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getSecretById
     */
    getSecret: async (
      id: string,
      masterPassword: string,
    ): Promise<LegacySecret | null> => {
      set({ error: null });
      try {
        const secret = await decryptItem(id, masterPassword);
        return secret as LegacySecret;
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞:", err);
        set({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç" });
        return null;
      }
    },
  })),
);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
useSecretsStore.getState().loadSecrets();

export default useSecretsStore;

