import { Clock, Key, Person, Plus, Shield, FileText } from "@gravity-ui/icons";
import {
  Button,
  Card,
  Flex,
  Icon,
  Tab,
  TabList,
  TabPanel,
  TabProvider,
} from "@gravity-ui/uikit";
import useCreateSecretModalStore from "app/store/modals/create-secret";
import useRequestAccessModal from "app/store/modals/requestAccess";
import { CardHeader } from "shared/components/CardHeader";
import ApplicationsTable from "features/components/pages/main/ApplicationsTable";
import CreateSecretModal from "features/components/pages/main/CreateSecretModal";
import MasterKeyModal from "features/components/pages/main/MasterKeyModal";
import RequestAccessModal from "features/components/pages/main/RequestAccessModal";
import RequestRulesModal from "features/components/pages/main/RequestRulesModal";
import SecretModal from "features/components/pages/main/SecretModal";
import RecentlyViewed from "features/components/pages/main/RecentlyViewed";
import FilterBar, { FilterState } from "features/components/pages/main/FilterBar";
import SecretsStatistics from "features/components/pages/main/SecretsStatistics";
import WalletTable from "features/components/pages/main/WalletTable";
import VaultInitializer from "features/components/VaultInitializer";
import VaultUnlock from "features/components/VaultUnlock";
import SyncStatusIndicator from "features/components/SyncStatusIndicator";
import { useState, useEffect, useMemo } from "react";
import { setTrayHandlers } from "shared/tauri";
import useSecretModalStore from "app/store/modals/secret";
import useRecentlyViewedStore from "app/store/recentlyViewed";
import useLocalStore from "features/hooks/useLocalStore";
import useSyncStore from "app/store/sync";

const Main = () => {
  const [activeTab, setActiveTab] = useState("wallet");
  const [filters, setFilters] = useState<FilterState>({
    searchQuery: '',
    typeFilter: 'all',
    expiryFilter: 'all',
  });
  const [vaultInitialized, setVaultInitialized] = useState(false);
  const [vaultUnlocked, setVaultUnlocked] = useState(false);
  const [masterPassword, setMasterPassword] = useState<string>("");
  const setOpenCreateSecretModal = useCreateSecretModalStore(
    (state) => state.setIsOpen,
  );
  const setOpenRequestAccessModal = useRequestAccessModal(
    (state) => state.setIsOpen,
  );
  const openSecretModal = useSecretModalStore((state) => state.openModal);
  const { secrets, refreshSecrets, getSecretById } = useLocalStore();
  const { recentlyViewed } = useRecentlyViewedStore();
  const { startSync, startPeriodicSync, stopPeriodicSync, checkConnection } = useSyncStore();

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
  const filteredSecrets = useMemo(() => {
    return secrets.filter(secret => {
      // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ (–¥–ª—è SecretListItem –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ø–∏—Å–∫–µ)
      if (filters.searchQuery.trim()) {
        const query = filters.searchQuery.toLowerCase();
        const matchesName = secret.name.toLowerCase().includes(query);
        if (!matchesName) {
          return false;
        }
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
      if (filters.typeFilter !== 'all' && secret.type !== filters.typeFilter) {
        return false;
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è SecretListItem
      // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ metadata.expires_at
      // TODO: –¥–æ–±–∞–≤–∏—Ç—å expires_at –≤ SecretListItem –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–ª–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
      if (filters.expiryFilter !== 'all') {
        // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–µ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é
        // —Ç–∞–∫ –∫–∞–∫ –≤ SecretListItem –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ expires_at
      }

      return true;
    });
  }, [secrets, filters]);

  const hasActiveFilters = 
    filters.searchQuery.trim() !== '' || 
    filters.typeFilter !== 'all' || 
    filters.expiryFilter !== 'all';

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  useEffect(() => {
    if (vaultUnlocked && masterPassword) {
      const performSync = async () => {
        try {
          console.log("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...");
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          const isOnline = await checkConnection();
          if (isOnline) {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            await startSync(masterPassword);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤
            await refreshSecrets();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            startPeriodicSync(masterPassword);
            
            console.log("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
          } else {
            console.warn("‚ö†Ô∏è OpenBao –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ offline —Ä–µ–∂–∏–º–µ");
          }
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ offline —Ä–µ–∂–∏–º–µ
        }
      };

      performSync();

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      return () => {
        stopPeriodicSync();
      };
    }
  }, [vaultUnlocked, masterPassword, checkConnection, startSync, refreshSecrets, startPeriodicSync, stopPeriodicSync]);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç—Ä–µ—è
  useEffect(() => {
    setTrayHandlers({
      openCreateSecretModal: () => setOpenCreateSecretModal(true),
      lockVault: () => {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        console.log("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–∑ —Ç—Ä–µ—è");
        stopPeriodicSync();
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è vaultUnlocked
        // setVaultUnlocked(false);
      },
      clearClipboard: () => {
        // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        if (navigator.clipboard) {
          navigator.clipboard.writeText("").catch(() => {});
        }
      },
      getVaultStatus: async () => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        return vaultUnlocked ? "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ" : "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ";
      },
      openSecretFromTray: async (secretId: string) => {
        // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ä–µ—Ç –ø–æ ID –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        try {
          const secret = await getSecretById(secretId, masterPassword);
          if (secret) {
            // @ts-ignore
            openSecretModal(secret);
          } else {
            console.error("–°–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:", secretId);
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ä–µ—Ç–∞:", error);
        }
      },
      getRecentlyViewed: () => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ store
        return recentlyViewed.map((secret) => ({
          id: secret.id,
          name: secret.name,
          secret_type: secret.type || "generic",
        }));
      },
    });
  }, [setOpenCreateSecretModal, vaultUnlocked, openSecretModal, secrets, recentlyViewed, stopPeriodicSync, getSecretById, masterPassword]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è
  const handleVaultUnlocked = (password: string) => {
    // @ts-ignore
    setMasterPassword(password);
    setVaultUnlocked(true);
  };

  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  if (!vaultInitialized) {
    return <VaultInitializer onInitialized={() => setVaultInitialized(true)} />;
  }

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
  if (!vaultUnlocked) {
    return <VaultUnlock onUnlocked={handleVaultUnlocked} />;
  }

  return (
    <Flex direction="column" spacing={{ px: "4" }}>
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
      <Card view="outlined" spacing={{ p: "2", my: "2" }}>
        <SyncStatusIndicator masterPassword={masterPassword} />
      </Card>

      <TabProvider value={activeTab} onUpdate={setActiveTab}>
        <TabList>
          <Tab value="wallet">
            <Flex gap="2" alignItems="center">
              <Icon data={Shield} /> –ö–æ—à–µ–ª–µ–∫
            </Flex>
          </Tab>
          <Tab value="applications">
            <Flex gap="2" alignItems="center">
              <Icon data={Person} /> –ó–∞—è–≤–∫–∏
            </Flex>
          </Tab>
        </TabList>

        <TabPanel value="wallet">
          <SecretModal />
          <MasterKeyModal />
          <RequestRulesModal />
          <RequestAccessModal />
          <CreateSecretModal />

          <Card view="outlined" spacing={{ p: "4", my: "4" }}>
            <Flex direction="column" gap="4">
              <CardHeader
                icon={Key}
                title="–ö–æ—à–µ–ª–µ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤"
                action={
                  <Button
                    view="action"
                    onClick={() => setOpenCreateSecretModal(true)}
                  >
                    <Icon data={Plus} /> –°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç
                  </Button>
                }
              />
              
              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              {!hasActiveFilters && <SecretsStatistics secrets={secrets} />}
              
              {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
              <FilterBar
                filters={filters}
                onFiltersChange={setFilters}
                resultsCount={filteredSecrets.length}
                totalCount={secrets.length}
              />
              
              {/* –ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤) */}
              {!hasActiveFilters && <RecentlyViewed />}
              
              {/* –¢–∞–±–ª–∏—Ü–∞ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ */}
              <WalletTable secrets={filteredSecrets} />
            </Flex>
          </Card>
        </TabPanel>

        <TabPanel value="applications">
          <Card view="outlined" spacing={{ p: "4", my: "4" }}>
            <Flex direction="column" gap="4">
              <CardHeader
                icon={FileText}
                title="–ú–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø"
                action={
                  <Button
                    view="action"
                    onClick={() => setOpenRequestAccessModal(true)}
                  >
                    <Icon data={Plus} /> –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                  </Button>
                }
              />
              
              <ApplicationsTable />
            </Flex>
          </Card>
        </TabPanel>
      </TabProvider>
    </Flex>
  );
};

export default Main;
