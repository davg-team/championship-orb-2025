import { Flex, Card, Text, Button, Loader } from "@gravity-ui/uikit";
import { useEffect, useState } from "react";
import { openUrl } from "@tauri-apps/plugin-opener";
import { useNavigate } from "react-router-dom";

export interface DeviceAuthorizationResponse {
  device_code: string;
  user_code: string;
  verification_uri: string;
  verification_uri_complete?: string;
  expires_in: number;
  interval?: number;
}

const Login = () => {
  const navigate = useNavigate();
  const [code, setCode] = useState("");

  useEffect(() => {
    if (!code) return;

    let intervalId: any;

    const fetchToken = async () => {
      try {
        const res = await fetch(
          "https://orencode.davg-team.ru/auth/realms/secretmanager/protocol/openid-connect/token",
          {
            method: "POST",
            headers: {
              Authorization:
                "Basic c2VjcmV0bWFuYWdlci1mcm9udGVuZDpwZTlxbjhIQlhFVTdTR21sQXlLUTV0cDJ2dkpMWXI1cg==",
              "Content-Type": "application/x-www-form-urlencoded",
            },
            body: new URLSearchParams({
              client_id: "secretmanager-frontend",
              grant_type: "urn:ietf:params:oauth:grant-type:device_code",
              device_code: code,
            }),
          },
        );

        if (res.ok) {
          const data = await res.json();
          console.log("–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", data);
          clearInterval(intervalId);
          localStorage.setItem("refresh", data.refresh_token);
          localStorage.setItem("token", data.access_token);
          navigate("/");
        } else {
          console.log("–¢–æ–∫–µ–Ω –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å...");
        }
      } catch (err) {
        console.error(err);
      }
    };

    intervalId = setInterval(fetchToken, 3000);
    return () => clearInterval(intervalId);
  }, [code]);

  return (
    <Flex alignItems={"center"} justifyContent={"center"} height={"100dvh"} style={{ background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" }}>
      <Card minWidth={"400px"} maxWidth={"500px"} view="raised" spacing={{ p: "6" }} style={{ borderRadius: "16px", boxShadow: "0 20px 40px rgba(0,0,0,0.1)" }}>
        <Flex direction={"column"} alignItems={"center"} gap="6">
          <img src="/logo/128x128.png" alt="Sema Logo" style={{ width: "80px", height: "80px", borderRadius: "12px" }} />
          <Flex direction={"column"} alignItems={"center"} gap="2">
            <Text style={{ fontSize: "2em", fontWeight: "bold", color: "#333" }}>Sema</Text>
            <Text style={{ fontSize: "1.2em", color: "#666" }}>–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–∫—Ä–µ—Ç–æ–≤</Text>
            <Text variant="body-2" style={{ textAlign: "center", color: "#888", marginTop: "8px" }}>
              –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            </Text>
          </Flex>
          <Flex direction={"column"} alignItems={"center"} gap="3" style={{ width: "100%" }}>
            <Text variant="body-3" style={{ fontWeight: "500", color: "#555" }}>–ß—Ç–æ —É–º–µ–µ—Ç Sema:</Text>
            <Flex direction={"column"} gap="2" style={{ width: "100%", textAlign: "left" }}>
              <Text variant="body-3" style={{ color: "#666" }}>‚Ä¢ üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</Text>
              <Text variant="body-3" style={{ color: "#666" }}>‚Ä¢ üíæ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</Text>
              <Text variant="body-3" style={{ color: "#666" }}>‚Ä¢ ‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞—á–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º</Text>
              <Text variant="body-3" style={{ color: "#666" }}>‚Ä¢ üñ•Ô∏è –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã</Text>
              <Text variant="body-3" style={{ color: "#666" }}>‚Ä¢ üì± –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (Windows, macOS, Linux)</Text>
            </Flex>
          </Flex>
          <Flex
            direction={"column"}
            alignItems={"center"}
            gap="4"
            width={"100%"}
          >
            {code ? (
              <Flex
                width={"100%"}
                direction={"column"}
                justifyContent={"center"}
                alignItems={"center"}
                gap="4"
              >
                <Loader size="l" />
                <Text variant="body-3" style={{ color: "#666" }}>–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</Text>
                <Text variant="caption-1" style={{ color: "#999", textAlign: "center" }}>
                  –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                </Text>
              </Flex>
            ) : (
              <Button
                view="action"
                width="max"
                size="l"
                style={{ borderRadius: "8px", fontWeight: "600" }}
                onClick={async () => {
                  const response = await fetch(
                    "https://orencode.davg-team.ru/auth/realms/secretmanager/protocol/openid-connect/auth/device",
                    {
                      method: "POST",
                      headers: {
                        Authorization:
                          "Basic c2VjcmV0bWFuYWdlci1mcm9udGVuZDpwZTlxbjhIQlhFVTdTR21sQXlLUTV0cDJ2dkpMWXI1cg==",
                        "Content-Type": "application/x-www-form-urlencoded",
                      },
                      body: new URLSearchParams({
                        client_id: "secretmanager-frontend",
                        scope: "openid",
                      }),
                    },
                  );

                  const data: DeviceAuthorizationResponse =
                    await response.json();

                  const code = data.device_code;
                  setCode(code);
                  openUrl(data.verification_uri_complete as string);
                }}
              >
                –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
              </Button>
            )}
          </Flex>
        </Flex>
      </Card>
    </Flex>
  );
};

export default Login;
