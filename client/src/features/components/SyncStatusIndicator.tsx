import { Button, Flex, Icon, Spin, Text, Tooltip } from "@gravity-ui/uikit";
import {
  ArrowsRotateRight,
  CircleCheck,
  CircleExclamation,
  Cloud,
  CloudSlash,
} from "@gravity-ui/icons";
import { useState } from "react";
import useSyncStore from "app/store/sync";
import useLocalStore from "features/hooks/useLocalStore";
import { syncManager } from "../../services/syncManager";

interface SyncStatusIndicatorProps {
  masterPassword?: string;
  onSyncClick?: () => void;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å OpenBao
 */
const SyncStatusIndicator = ({ masterPassword, onSyncClick }: SyncStatusIndicatorProps) => {
  const { syncState, openBaoToken, isTokenValid, forceSync, checkConnection } = useSyncStore();
  const { refreshSecrets } = useLocalStore();
  const [isCheckingConnection, setIsCheckingConnection] = useState(false);

  const handleSyncClick = async () => {
    if (onSyncClick) {
      onSyncClick();
    } else if (masterPassword) {
      try {
        // –ï—Å–ª–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (syncState.mode === "offline") {
          console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞...");
          setIsCheckingConnection(true);
          
          const isOnline = await checkConnection();
          setIsCheckingConnection(false);
          
          if (!isOnline) {
            console.log("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
            return;
          }
          console.log("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...");
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        await forceSync(masterPassword);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await refreshSecrets();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
        setIsCheckingConnection(false);
      }
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = () => {
    if (syncState.mode === "offline") {
      return <Icon data={CloudSlash} size={16} />;
    }

    switch (syncState.status) {
      case "syncing":
        return <Spin size="xs" />;
      case "success":
        return <Icon data={CircleCheck} size={16} />;
      case "error":
        return <Icon data={CircleExclamation} size={16} />;
      default:
        return <Icon data={Cloud} size={16} />;
    }
  };

  const getStatusText = () => {
    if (syncState.mode === "offline") {
      return "Offline —Ä–µ–∂–∏–º";
    }

    switch (syncState.status) {
      case "syncing":
        if (syncState.progress.total > 0) {
          return `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${syncState.progress.current}/${syncState.progress.total}`;
        }
        return "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...";
      case "success":
        const timeSince = syncManager.getTimeSinceLastSync();
        return timeSince ? `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${timeSince}` : "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ";
      case "error":
        return syncState.error || "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏";
      default:
        return "–ì–æ—Ç–æ–≤–æ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏";
    }
  };

  const getStatusColor = (): "secondary" | "info" | "positive" | "warning" | "danger" => {
    if (syncState.mode === "offline") {
      return "warning";
    }

    switch (syncState.status) {
      case "syncing":
        return "info";
      case "success":
        return "positive";
      case "error":
        return "danger";
      default:
        return "secondary";
    }
  };

  const getTooltipContent = () => {
    const lines = [
      `–†–µ–∂–∏–º: ${syncState.mode === "online" ? "Online" : "Offline"}`,
      `–°—Ç–∞—Ç—É—Å: ${getStatusText()}`,
    ];

    if (openBaoToken) {
      lines.push(`–¢–æ–∫–µ–Ω: ${isTokenValid ? "‚úì –í–∞–ª–∏–¥–µ–Ω" : "‚úó –ò—Å—Ç—ë–∫"}`);
      lines.push(`–¢–∏–ø: ${isTokenValid ? "OpenBao" : "–õ–æ–∫–∞–ª—å–Ω—ã–π"}`);
    } else {
      lines.push("–¢–æ–∫–µ–Ω: –ù–µ –ø–æ–ª—É—á–µ–Ω");
      lines.push("–¢–∏–ø: –õ–æ–∫–∞–ª—å–Ω—ã–π");
    }

    if (syncState.lastSyncTime) {
      const date = new Date(syncState.lastSyncTime);
      lines.push(`–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä.: ${date.toLocaleString("ru-RU")}`);
    }

    return lines.join("\n");
  };

  return (
    <Flex gap={2} alignItems="center">
      <Tooltip content={<pre style={{ margin: 0, whiteSpace: "pre-wrap" }}>{getTooltipContent()}</pre>}>
        <Flex gap={2} alignItems="center">
          {getStatusIcon()}
          <Text variant="body-1" color={getStatusColor()}>
            {getStatusText()}
          </Text>
          {openBaoToken && isTokenValid && (
            <Icon data={Cloud} size={12} />
          )}
          {(!openBaoToken || !isTokenValid) && (
            <Icon data={CloudSlash} size={12} />
          )}
        </Flex>
      </Tooltip>

      {masterPassword && syncState.status !== "syncing" && (
        <Tooltip content={syncState.mode === "offline" ? "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å" : "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"}>
          <Button
            view="flat"
            size="s"
            onClick={handleSyncClick}
            disabled={isCheckingConnection}
          >
            {isCheckingConnection ? (
              <Spin size="xs" />
            ) : (
              <Icon data={ArrowsRotateRight} size={16} />
            )}
          </Button>
        </Tooltip>
      )}
    </Flex>
  );
};

export default SyncStatusIndicator;
