services:
  postgres-keycloak:
    image: postgres:15
    container_name: postgres-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: 567675675676
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backbone

  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    command: start --http-enabled=true --hostname-strict=false
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin45454545
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: 567675675676
      KC_PROXY_HEADERS: xforwarded
      KC_HOSTNAME: orencode.davg-team.ru
      KC_HTTP_RELATIVE_PATH: /auth

    depends_on:
      - postgres-keycloak
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backbone

  openbao:
    build:
      context: ./openbao
    container_name: openbao
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - ./openbao/config:/openbao/config:ro
      - openbao_data:/openbao/data
      - openbao_logs:/openbao/logs
      - openbao_keys:/openbao/keys
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--proxy",
          "off",
          "http://localhost:8200/v1/sys/health",
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backbone
      # - openbao-network

  postgres-backend:
    image: postgres:15
    container_name: postgres-backend
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: local
    volumes:
      - postgres_backend_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d local"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backbone

  # nginx
  frontend-build:
    build:
      context: ./frontend
    container_name: frontend-build
    volumes:
      - ./frontend/dist:/frontend/dist:rw
    command: ["sh", "-c", "cp -r /dist /frontend/dist && sleep infinity"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backbone

  nginx:
    build:
      context: ./router
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      # frontend-build:
      #   condition: service_completed_successfully
      keycloak:
        condition: service_started
      openbao:
        condition: service_started
        # condition: service_healthy
      postgres-backend:
        condition: service_healthy
      # backend-notifications:
      #   condition: service_healthy
      # backend_applications:
      #   condition: service_healthy
    volumes:
      - ./frontend/dist:/frontend/dist
      - ./router/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backbone

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "-u", "guest:guest", "http://localhost:15672/api/healthchecks/node"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    networks:
      - backbone

  backend-notifications:
    build:
      context: ./backend/backend-notifications
    container_name: backend-notifications
    environment:
      PORT: 8081

      SMTP_HOST: 
      SMTP_PORT: 587
      SMTP_USERNAME: 
      SMTP_PASSWORD: 
      SMTP_FROM: orencode@davg-team.ru

      ADMIN_EMAIL: orencode@davg-team.ru

      STORAGE_HOST: postgres-backend
      STORAGE_PORT: 5432
      STORAGE_USER: postgres
      STORAGE_PASS: postgres
      STORAGE_DB_NAME: local

      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"

      TELEGRAM_BOT_TOKEN: ""
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/ping"]
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    depends_on:
      postgres-backend:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - backbone

  backend_applications:
    build:
      context: ./backend/backend-applications
    container_name: backend_applications
    environment:
      PORT: 8082
      DB_HOST: postgres-backend
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: local
      NOTIFICATIONS_URL: https://orencode.davg-team.ru/api/notifications
      OPENBAO_URL: https://orencode.davg-team.ru/v1
      OPENBAO_ROOT_TOKEN: s.YyHedBSgIDwxHRfwORScJbk7
    ports:
      - "8082:8082"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/ping"]
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      postgres-backend:
        condition: service_healthy
    networks:
      - backbone

  # mongodb:
  #   image: mongo
  #   container_name: mongodb
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongo_data:/data/db
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"
  #   networks:
  #     - backbone

networks:
  backbone:
    driver: bridge

  openbao-network:
    driver: bridge

volumes:
  postgres_data:
  postgres_backend_data:
  openbao_data:
  openbao_logs:
  openbao_keys:

secrets:
  postgres_host:
    external: true
  postgres_port:
    external: true
  postgres_user:
    external: true
  postgres_password:
    external: true
  postgres_db:
    external: true
  smtp_server:
    external: true
  smtp_port:
    external: true
  smtp_user:
    external: true
  smtp_password:
    external: true
  from_address:
    external: true
  admin_email:
    external: true
